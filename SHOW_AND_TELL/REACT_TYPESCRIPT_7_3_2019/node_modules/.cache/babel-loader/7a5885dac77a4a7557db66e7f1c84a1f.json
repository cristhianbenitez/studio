{"ast":null,"code":"var _jsxFileName = \"/Users/mokay/Desktop/code/sanctu-compu/show-and-tell/react-typescript/src/components/IndividuallyTypedButton.tsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass IndividuallyTypedButton extends Component {\n  render() {\n    if ('internalTo' in this.props) {\n      return React.createElement(Link, {\n        to: this.props.internalTo,\n        \"aria-label\": this.props.ariaLabel,\n        ref: this.props.elemRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, 'text' in this.props ? this.props.text : this.props.children));\n    } // const isExternalLink = 'externalTo' in this.props;\n    // const isButton = 'onClick' in this.props;\n\n\n    if ('externalTo' in this.props) {}\n\n    return null; // if (to) {\n    //   if (linkIsExternal(to)) {\n    //     return (\n    //       <a\n    //         href={to}\n    //         target=\"_blank\"\n    //         rel=\"noopener noreferrer\"\n    //         aria-label={ariaLabel}\n    //         ref={elemRef as RefObject<HTMLAnchorElement>}\n    //       >\n    //         <div className={className}>\n    //           {text ? text : children}\n    //         </div>\n    //       </a>\n    //     );\n    //   }\n    // }\n    // return (\n    //   <button\n    //     className={className}\n    //     aria-label={ariaLabel}\n    //     onClick={onClick}\n    //     type={type}\n    //     ref={elemRef as RefObject<HTMLButtonElement>}\n    //   >\n    //     {text ? text : children}\n    //   </button>\n    // );\n  }\n\n}\n\nexport default IndividuallyTypedButton;","map":{"version":3,"sources":["/Users/mokay/Desktop/code/sanctu-compu/show-and-tell/react-typescript/src/components/IndividuallyTypedButton.tsx"],"names":["React","Component","Link","IndividuallyTypedButton","render","props","internalTo","ariaLabel","elemRef","className","text","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAwD,OAAxD;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAkCA,MAAMC,uBAAN,SAAsCF,SAAtC,CAAuD;AACrDG,EAAAA,MAAM,GAAG;AACP,QAAI,gBAAgB,KAAKC,KAAzB,EAAgC;AAC9B,aAAQ,oBAAC,IAAD;AACN,QAAA,EAAE,EAAE,KAAKA,KAAL,CAAWC,UADT;AAEN,sBAAY,KAAKD,KAAL,CAAWE,SAFjB;AAGN,QAAA,GAAG,EAAE,KAAKF,KAAL,CAAWG,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKN;AAAK,QAAA,SAAS,EAAE,KAAKH,KAAL,CAAWI,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,UAAU,KAAKJ,KAAhB,GAAyB,KAAKA,KAAL,CAAWK,IAApC,GAA2C,KAAKL,KAAL,CAAWM,QADzD,CALM,CAAR;AASD,KAXM,CAaP;AACA;;;AAEA,QAAI,gBAAgB,KAAKN,KAAzB,EAAgC,CAE/B;;AAED,WAAO,IAAP,CApBO,CAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AApDoD;;AAuDvD,eAAeF,uBAAf","sourcesContent":["import React, { Component, MouseEvent, RefObject } from 'react';\nimport { Link } from 'react-router-dom';\n\ntype SharedContentProps = {\n  children: React.ReactNode;\n} | {\n  text: string;\n}\n\ntype SharedProps = SharedContentProps & {\n  className: string,\n  ariaLabel: string,\n};\n\ntype ButtonProps = {\n  onClick(e: MouseEvent<HTMLElement>): void;\n  elemRef?: RefObject<HTMLButtonElement>;\n  type: 'button' | 'submit' | 'reset';\n}\n\ntype InternalLinkProps = {\n  internalTo: string;\n  onClick: undefined;\n  elemRef?: RefObject<Link>;\n}\n\ntype ExternalLinkProps = {\n  externalTo: string;\n  elemRef?: RefObject<HTMLAnchorElement>;\n}\n\ntype UniqueProps = ButtonProps | InternalLinkProps | ExternalLinkProps;\n\ntype Props = SharedProps & UniqueProps;\n\nclass IndividuallyTypedButton extends Component<Props> {\n  render() {\n    if ('internalTo' in this.props) {\n      return (<Link\n        to={this.props.internalTo}\n        aria-label={this.props.ariaLabel}\n        ref={this.props.elemRef}\n      >\n        <div className={this.props.className}>\n          {('text' in this.props) ? this.props.text : this.props.children}\n        </div>\n      </Link>)\n    }\n\n    // const isExternalLink = 'externalTo' in this.props;\n    // const isButton = 'onClick' in this.props;\n    \n    if ('externalTo' in this.props) {\n\n    }\n\n    return null;\n\n    // if (to) {\n    //   if (linkIsExternal(to)) {\n    //     return (\n    //       <a\n    //         href={to}\n    //         target=\"_blank\"\n    //         rel=\"noopener noreferrer\"\n    //         aria-label={ariaLabel}\n    //         ref={elemRef as RefObject<HTMLAnchorElement>}\n    //       >\n    //         <div className={className}>\n    //           {text ? text : children}\n    //         </div>\n    //       </a>\n    //     );\n    //   }\n    // }\n\n    // return (\n    //   <button\n    //     className={className}\n    //     aria-label={ariaLabel}\n    //     onClick={onClick}\n    //     type={type}\n    //     ref={elemRef as RefObject<HTMLButtonElement>}\n    //   >\n    //     {text ? text : children}\n    //   </button>\n    // );\n  }\n}\n\nexport default IndividuallyTypedButton;\n"]},"metadata":{},"sourceType":"module"}